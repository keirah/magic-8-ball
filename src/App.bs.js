// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as List                         from "bs-platform/lib/es6/list.js";
import * as Block                        from "bs-platform/lib/es6/block.js";
import * as Curry                        from "bs-platform/lib/es6/curry.js";
import * as React                        from "react";
import * as Caml_int32                   from "bs-platform/lib/es6/caml_int32.js";
import * as Pervasives                   from "bs-platform/lib/es6/pervasives.js";
import * as ReasonReact                  from "reason-react/src/ReasonReact.js";
import * as LoadingGif                   from "./loading.gif";
import * as Arrow$ReactTemplate          from "./Arrow.bs.js";
import * as Utils$ReactTemplate          from "./Utils.bs.js";
import * as Answer$ReactTemplate         from "./Answer.bs.js";
import * as Header$ReactTemplate         from "./Header.bs.js";
import * as QuestionData$ReactTemplate   from "./QuestionData.bs.js";
import * as ButtonWrapper$ReactTemplate  from "./ButtonWrapper.bs.js";
import * as MagicEightBall$ReactTemplate from "./MagicEightBall.bs.js";

function setButtonRef(r, param) {
  param[/* state */2][/* buttonRef */3][0] = (r == null) ? /* None */0 : [r];
  return /* () */0;
}

function setWrapperRef(r, param) {
  param[/* state */2][/* wrapperRef */4][0] = (r == null) ? /* None */0 : [r];
  return /* () */0;
}

var component = ReasonReact.reducerComponent("App");

((require('./app.scss')));

function make() {
  var newrecord = component.slice();
  newrecord[/* didMount */4] = (function (self) {
      var match = self[/* state */2][/* wrapperRef */4][0];
      if (match) {
        var rect = match[0].getBoundingClientRect();
        Curry._1(self[/* send */4], /* SetButtonAttributes */Block.__(1, [/* record */[
                  /* height */rect.height,
                  /* width */rect.width
                ]]));
        Curry._1(self[/* send */4], /* FetchData */1);
      }
      return /* NoUpdate */0;
    });
  newrecord[/* didUpdate */5] = (function (param) {
      var newSelf = param[/* newSelf */1];
      var match = param[/* oldSelf */0][/* state */2][/* buttonAttributes */5];
      var match$1 = newSelf[/* state */2][/* wrapperRef */4][0];
      if (match) {
        if (match$1) {
          var rect = match$1[0].getBoundingClientRect();
          if (match[0][/* width */1] !== rect.width) {
            return Curry._1(newSelf[/* send */4], /* SetButtonAttributes */Block.__(1, [/* record */[
                            /* height */rect.height,
                            /* width */rect.width
                          ]]));
          } else {
            return 0;
          }
        } else {
          return /* () */0;
        }
      } else if (match$1) {
        var rect$1 = match$1[0].getBoundingClientRect();
        return Curry._1(newSelf[/* send */4], /* SetButtonAttributes */Block.__(1, [/* record */[
                        /* height */rect$1.height,
                        /* width */rect$1.width
                      ]]));
      } else {
        return /* () */0;
      }
    });
  newrecord[/* render */9] = (function (param) {
      var send = param[/* send */4];
      var state = param[/* state */2];
      var handle = param[/* handle */0];
      var match = state[/* responseData */0];
      var answer = match ? ReasonReact.element(/* None */0, /* None */0, Answer$ReactTemplate.make(match[0], /* array */[])) : React.createElement("div", {
              className: "noData"
            }, React.createElement("img", {
                  src: LoadingGif,
                  width: "200"
                }));
      var match$1 = state[/* buttonAttributes */5];
      var buttonDetails;
      if (match$1) {
        var width = Pervasives.string_of_int(match$1[0][/* width */1]);
        buttonDetails = React.createElement("div", undefined, "(" + (Utils$ReactTemplate.ensureTwoDecimalPlaces(width) + "px)"));
      } else {
        buttonDetails = React.createElement("div", {
              className: "noData"
            }, "No data");
      }
      return React.createElement("div", {
                  className: "app"
                }, React.createElement("div", {
                      className: "appContainer"
                    }, ReasonReact.element(/* None */0, /* None */0, Header$ReactTemplate.make("Rick Astley's Magic 8 Ball: " + Pervasives.string_of_int(state[/* counter */1]), /* array */[])), ReasonReact.element(/* None */0, /* None */0, Arrow$ReactTemplate.make(/* array */[])), React.createElement("div", {
                          className: "buttonDetails"
                        }, buttonDetails), React.createElement("div", {
                          ref: Curry._1(handle, setWrapperRef),
                          className: "buttonWrapper"
                        }, ReasonReact.element(/* None */0, /* Some */[Curry._1(handle, setButtonRef)], ButtonWrapper$ReactTemplate.make((function () {
                                    return Curry._1(send, /* Click */0);
                                  }), List.nth(QuestionData$ReactTemplate.questions, Caml_int32.mod_(state[/* counter */1], List.length(QuestionData$ReactTemplate.questions))), /* array */[]))), React.createElement("div", {
                          className: "result"
                        }, React.createElement("div", {
                              className: "resultImageContainer"
                            }, answer))));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* responseData : None */0,
              /* counter */0,
              /* fetching : false */0,
              /* buttonRef */[/* None */0],
              /* wrapperRef */[/* None */0],
              /* buttonAttributes : None */0
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      if (typeof action === "number") {
        if (action) {
          var newrecord = state.slice();
          return /* UpdateWithSideEffects */Block.__(3, [
                    (newrecord[/* fetching */2] = /* true */1, newrecord),
                    (function (self) {
                        MagicEightBall$ReactTemplate.fetchAnswer(Utils$ReactTemplate.makeURL(List.nth(QuestionData$ReactTemplate.questions, Caml_int32.mod_(state[/* counter */1], List.length(QuestionData$ReactTemplate.questions))))).then((function (responseData) {
                                  Curry._2(self[/* reduce */1], (function () {
                                          return /* LoadData */Block.__(0, [responseData]);
                                        }), responseData);
                                  return Promise.resolve(/* () */0);
                                })).catch((function (error) {
                                return Promise.resolve((console.log(error), /* () */0));
                              }));
                        return /* () */0;
                      })
                  ]);
        } else {
          return /* UpdateWithSideEffects */Block.__(3, [
                    /* record */[
                      /* responseData : None */0,
                      /* counter */state[/* counter */1] + 1 | 0,
                      /* fetching */state[/* fetching */2],
                      /* buttonRef */state[/* buttonRef */3],
                      /* wrapperRef */state[/* wrapperRef */4],
                      /* buttonAttributes */state[/* buttonAttributes */5]
                    ],
                    (function (self) {
                        return Curry._1(self[/* send */4], /* FetchData */1);
                      })
                  ]);
        }
      } else if (action.tag) {
        var newrecord$1 = state.slice();
        return /* Update */Block.__(0, [(newrecord$1[/* buttonAttributes */5] = /* Some */[action[0]], newrecord$1)]);
      } else {
        return /* Update */Block.__(0, [/* record */[
                    /* responseData : Some */[action[0]],
                    /* counter */state[/* counter */1],
                    /* fetching : false */0,
                    /* buttonRef */state[/* buttonRef */3],
                    /* wrapperRef */state[/* wrapperRef */4],
                    /* buttonAttributes */state[/* buttonAttributes */5]
                  ]]);
      }
    });
  return newrecord;
}

export {
  setButtonRef  ,
  setWrapperRef ,
  component     ,
  make          ,
  
}
/* component Not a pure module */
